package cpustream;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class CpuStreamKernel extends Kernel {
	private static final DFEType type = dfeFloat(8, 24);
	public CpuStreamKernel(KernelParameters parameters) {
		super(parameters);

		DFEVar x = io.input("x", type);

		DFEVar N = io.scalarInput("N", dfeUInt(64));

		DFEVar cnt = control.count.simpleCounter(64);


		DFEVar prev, next, divider, result;

		prev = cnt.eq(0) ? 0 : stream.offset(x, -1);

		next = cnt.eq(N - 1) ? 0 : stream.offset(x, +1);

		divider = (cnt.eq(0) |  cnt.eq(N - 1)) ? constant.var(type,2): 3;

		result = (prev + next + x)/divider;


		io.output("z", result, type);
	}
}
